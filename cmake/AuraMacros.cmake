macro(aura_add_source)
    LIST(APPEND SRCS ${ARGN})
endmacro()

function(addprefix var prefix)
   set(listVar "")
   foreach(f ${ARGN})
      list(APPEND listVar "${prefix}/${f}")
   endforeach(f)
   set(${var} "${listVar}" PARENT_SCOPE)
endfunction()

macro(aura_add_source_in_dir dir)
  addprefix(tmpvar ${dir}/ ${ARGN})
  aura_add_source(${tmpvar})
endmacro()

macro(aura_add_include_dirs)
  LIST(APPEND AURA_INCLUDE_DIRS ${ARGN})
endmacro()

macro(aura_add_link_libraries)
  LIST(APPEND AURA_LINK_LIBS ${ARGN})
endmacro()

macro(aura_add_eventloop name)
  aura_add_source(${ARGN})
  list(APPEND EVENTSYSTEM ${name})
endmacro()

macro(aura_add_transport name)
  list(APPEND TRANSPORTS ${name})
  aura_add_source(${ARGN})
endmacro()


macro(aura_pkg_require var name)
  pkg_check_modules(${var} ${name})
  #DO a thing only the first time dependency is mentioned
  if (NOT AURA_REQUIREMENT_${var}_ADDED)
    set(AURA_REQUIREMENT_${var}_ADDED true)
    if (${ARGN})
      set(PKG_CONFIG_REQUIRES "${PKG_CONFIG_REQUIRES} ${name}")
      message(STATUS "Adding ${name} as a pkg-config requirement")
    endif()
    aura_add_link_libraries(${${var}_LIBRARIES})
    aura_add_include_dirs(${${var}_INCLUDE_DIRS})
  endif()
endmacro()

MACRO (TODAY RESULT)
    IF (WIN32)
        EXECUTE_PROCESS(COMMAND "cmd" " /C date /T" OUTPUT_VARIABLE ${RESULT})
        string(REGEX REPLACE "(..)/(..)/..(..).*" "\\1/\\2/\\3" ${RESULT} ${${RESULT}})
    ELSEIF(UNIX)
        EXECUTE_PROCESS(COMMAND "date" "+%d/%m/%Y" OUTPUT_VARIABLE ${RESULT})
        string(REGEX REPLACE "(..)/(..)/..(..).*" "\\1/\\2/\\3" ${RESULT} ${${RESULT}})
    ELSE (WIN32)
        MESSAGE(SEND_ERROR "date not implemented")
        SET(${RESULT} 000000)
    ENDIF (WIN32)
ENDMACRO (TODAY)


macro(generate_clang_complete)
  message(STATUS "Generarating ${CMAKE_SOURCE_DIR}/.clang_complete")
  get_property(dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
  file(WRITE ${CMAKE_SOURCE_DIR}/.clang_complete "")
  foreach(dir ${dirs})
    file(APPEND ${CMAKE_SOURCE_DIR}/.clang_complete "-I${dir}\n")
  endforeach()
  string(REPLACE "'" "" CMAKE_C_FLAGS_SPLIT ${CMAKE_C_FLAGS})
  string(REPLACE " " ";" CMAKE_C_FLAGS_SPLIT ${CMAKE_C_FLAGS_SPLIT})
  foreach(flag ${CMAKE_C_FLAGS_SPLIT})
  # FixMe: Ugly hack
    if (NOT "${flag}" MATCHES "-Wall")
      if (NOT "${flag}" MATCHES "-g")
        if (NOT "${flag}" MATCHES "-fPIC")
          file(APPEND ${CMAKE_SOURCE_DIR}/.clang_complete "${flag}\n")
        endif()
      endif()
    endif()
  endforeach()
endmacro()
